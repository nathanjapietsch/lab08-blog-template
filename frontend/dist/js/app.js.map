{"version":3,"sources":["../deps/node_modules/browser-pack/_prelude.js","src/client.js","src/components/DevTools.js","src/components/Home.js","src/components/Post.js","src/components/PostEdit.js","src/components/PostList.js","src/components/PostNew.js","src/components/PostView.js","src/components/Root.js","src/helpers/ajax.js","src/helpers/api.js","src/helpers/createActionDispatchers.js","src/helpers/createStore.js","src/reducers/index.js","src/reducers/posts.js","src/reducers/time.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const React = require('react');\nconst ReactDOM = require('react-dom');\n\nconst createStore = require('./helpers/createStore');\nconst Root = React.createFactory(require('./components/Root'));\n\nconst moment = require('moment');\nconst timeActionCreators = require('./reducers/time');\n\nconst combinedReducers = require('./reducers');\n\n// TODO Section 6: Change code below to get data from the API\n\nwindow.main = (initialState) => {\n  // Create root React component with Redux store\n  const store = createStore(initialState);\n  const rootComponent = Root({ store });\n\n  // Mount React root component in DOM\n  const mountPoint = document.getElementById('root');\n  ReactDOM.render(rootComponent, mountPoint);\n\n  window.setInterval(() => {\n    const now = moment().format();\n    store.dispatch(timeActionCreators.setCurrentTime(now));\n  }, 10000);\n}\n","const React = require('react');\nconst ReduxDevtools = require('redux-devtools');\nconst DockMonitor = require('redux-devtools-dock-monitor').default;\nconst LogMonitor = require('redux-devtools-log-monitor').default;\n\nconst _DevTools = ReduxDevtools.createDevTools(\n  <DockMonitor toggleVisibilityKey=\"h\" changePositionKey=\"q\" defaultIsVisible={true}>\n    <LogMonitor />\n  </DockMonitor>\n);\n\nclass DevTools extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isMounted: false };\n  }\n\n  static instrument() {\n    return _DevTools.instrument(arguments);\n  }\n\n  componentDidMount() {\n    this.setState({ isMounted: true });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.isMounted && <_DevTools />}\n      </div>\n    );\n  }\n};\n\n/**\n * Redux development tools (useful for debugging).\n */\nmodule.exports = DevTools;\n","const React = require('react');\n\nconst PostList = require('./PostList');\n\n/**\n * The guts of the home page.\n */\nconst Home = () => (\n  <div>\n    {/* The heading area of the page */}\n    <div className=\"blog-header\">\n      <h1 className=\"blog-title\">An Example of a Blog</h1>\n      <p className=\"lead blog-description\">React and Redux and Bootstrap, oh my!</p>\n    </div>\n    {/* A list of blog posts, including a couple of buttons */}\n    <PostList />\n  </div>\n);\n\nmodule.exports = Home;\n","const React = require('react');\n\nconst PostEdit = require('./PostEdit');\nconst PostView = require('./PostView');\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set initial internal state for this component\n    this.state = { editing: false };\n  }\n\n  render() {\n    const openEdit = () => {\n      this.setState({ editing: true });\n    };\n\n    const closeEdit = () => {\n      this.setState({ editing: false });\n    };\n\n    const saveEdit = (editedPost) => {\n      this.props.savePost(editedPost, (err) => {\n        if(!err) closeEdit();\n      });\n    };\n\n    const deleteThisPost = () => {\n      this.props.deletePost(this.props.post.id);\n    };\n\n    // TODO Section 8: Add code for delete\n\n    if(this.state.editing) {\n      // Render component for editing the post\n      return (\n        <PostEdit\n          post={this.props.post}\n          onSave={saveEdit}\n          onCancel={closeEdit}\n        />\n      );\n    }\n    // Render read-only view of the post\n    // TODO Section 8: add code for delete\n    return (\n      <PostView\n        post={this.props.post}\n        time={this.props.time}\n        onDelete={deleteThisPost}\n        onEdit={openEdit}\n      />\n    );\n  }\n}\n\n// Export the Post component\nmodule.exports = Post;\n","const React = require('react');\nconst _ = require('lodash');\n\n/**\n * A form for editing a blog post.\n */\nclass PostEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    const post = props.post || {};\n\n    this.state = {\n      title: post.title || '',\n      content: post.content || ''\n    };\n  }\n\n  render() {\n    const revertAndStopEditing = (event) => {\n      event.preventDefault();\n      this.props.onCancel();\n    };\n\n    const submitAndStopEditing = (event) => {\n      event.preventDefault();\n      // Creates a new post object and saves it.\n      const editedPost = _.assign({}, this.props.post, {\n        title: this.state.title,\n        content: this.state.content\n      });\n      this.props.onSave(editedPost);\n    };\n\n    const onTitleChange = (event) => {\n      this.setState({ title: event.target.value });\n    };\n\n    const onContentChange = (event) => {\n      this.setState({ content: event.target.value });\n    };\n\n    return (\n      <form className=\"blog-post\">\n        {/* Title field */}\n        <div className=\"form-group\">\n          <input className=\"form-control input-lg\" value={this.state.title}\n            placeholder=\"Post title\" onChange={onTitleChange}\n          />\n        </div>\n        {/* Content field */}\n        <div className=\"form-group\">\n          <textarea\n            className=\"form-control\"\n            style={{ height: 300 }}\n            value={this.state.content}\n            onChange={onContentChange}\n          />\n        </div>\n        {/* Save button */}\n        <button className=\"btn btn-default pull-right\"\n          onClick={submitAndStopEditing}\n        >\n          Save\n        </button>\n        {/* Cancel button */}\n        <button className=\"btn btn-default pull-right\"\n          style={{ marginRight: '12px' }}\n          onClick={revertAndStopEditing}\n        >\n          Cancel\n        </button>\n      </form>\n    );\n  }\n}\n\nmodule.exports = PostEdit;\n","const React = require('react');\nconst ReactRedux = require('react-redux');\nconst _ = require('lodash');\n\nconst postsActionCreators = require('../reducers/posts');\nconst createActionDispatchers = require('../helpers/createActionDispatchers');\nconst Post = require('./Post');\nconst PostNew = require('./PostNew');\n\n/**\n * A list of blog posts, along with buttons for writing a new post\n * and loading more posts.\n */\nclass PostList extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set initial internal state for this component\n    this.state = { loading: false };\n  }\n\n  render() {\n    const onLoadButtonClick = () => {\n      // If we are not already in the process of loading posts,\n      // start loading more posts.\n      if(!this.state.loading) {\n        this.setState({ loading: true });\n        this.props.loadMorePosts(() => {\n          this.setState({ loading: false });\n        });\n      }\n    };\n\n    // Function which creates a post component from a post ID\n    const createPostComponent = (currentPost) => {\n      /* TODO Section 8: Add code for delete */\n      return (\n        <Post\n          key={currentPost.id}\n          post={currentPost}\n          time={this.props.time}\n          savePost={this.props.savePost}\n          deletePost={this.props.deletePost}\n        />\n      );\n    };\n\n    return (\n      <div className=\"row\">\n        <div className=\"blog-main\">\n          {/* Button for writing a new post */}\n          <PostNew\n            createPost={this.props.createPost}\n          />\n\n          {/* TODO Section 3: Write code to list all the posts */\n            this.props.posts.visiblePosts.map(createPostComponent)\n          }\n          {/* Button for loading more posts */}\n          <button className=\"blog-load-more btn btn-default btn-lg\"\n            onClick={onLoadButtonClick}\n            disabled={this.state.loading}\n          >\n            {this.state.loading ? 'Loading...' : 'Load more posts'}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// Connect PostList component to the Redux store\nconst PostListContainer = ReactRedux.connect(\n  // Map store state to props\n  (state) => ({\n    posts: state.posts,\n    time: state.time\n  }),\n  createActionDispatchers(postsActionCreators)\n)(PostList);\n\nmodule.exports = PostListContainer;\n","const React = require('react');\nconst PostEdit = require('./PostEdit');\n\n/**\n * A button which expands into a form for writing a new post.\n */\nclass PostNew extends React.Component {\n  constructor(props) {\n    super(props);\n    // Set initial internal state for this component\n    this.state = { editing: false };\n  }\n\n  render() {\n    const openEdit = () => {\n      this.setState({ editing: true });\n    };\n\n    const closeEdit = () => {\n      this.setState({ editing: false });\n    };\n\n    const createPost = (newPost) => {\n      this.props.createPost(newPost, (err) => {\n        if(!err) closeEdit();\n      });\n    };\n\n    if(this.state.editing) {\n      // Render component for editing the post\n      return (\n        <PostEdit\n          post={this.props.post}\n          onSave={createPost}\n          onCancel={closeEdit}\n        />\n      );\n    }\n\n\n\n    // TODO Section 7: Write code to switch to edit mode when editing is clicked\n\n    return (\n      <button className=\"blog-load-more btn btn-primary btn-lg\"\n        onClick={ openEdit }\n      >\n        Write new post\n      </button>\n    );\n  }\n}\n\nmodule.exports = PostNew;\n","const React = require('react');\nconst moment = require('moment');\n\n/**\n * Render edit/delete buttons and post timestamp.\n *\n * List of props: post, time, onEdit, onDelete\n */\nconst PostMeta = (props) => {\n  return (\n    <div className=\"blog-post-meta\">\n      <a role=\"button\" title=\"Edit post\"\n        style={{ paddingRight: '8px' }}\n        onClick={ props.onEdit }\n      >\n        <span className=\"fa fa-edit\" />\n      </a>\n\n      {/* TODO Section 8: Add a delete button */}\n      <a role=\"button\" title=\"Delete post\"\n      style={{  paddingRight: '8px'  }}\n      onClick={  props.onDelete }\n      >\n        <span className=\"fa fa-remove\" />\n      </a>\n      { moment(props.post.createdAt).from(props.time.now) }\n    </div>\n  );\n};\n\n/**\n * A read-only view of a blog post.\n * This is a stateless functional component.\n * It takes props as its args and returns what the render method would return.\n *\n * List of props: post, time, onEdit, onDelete\n */\nconst PostView = (props) => {\n  return (\n    <div className=\"blog-post\">\n      <h2 className=\"blog-post-title\">{props.post.title}</h2>\n\n      {/* TODO Section 4: Display blog metadata */\n      <PostMeta {...props}/>}\n      {/* TODO Section 4: Display blog content */\n      <div className=\"blog-post-content\">{props.post.content}</div>}\n    </div>\n  );\n};\n\nmodule.exports = PostView;\n","/**\n * The root React component from which all other components on the page are\n * descended. It is this component which is directly mounted on the DOM.\n */\n\nconst React = require('react');\nconst ReactRedux = require('react-redux');\n\nconst Provider = ReactRedux.Provider;\nconst Home = require('./Home');\n\n// Enable development tools when in development mode\nlet DevTools = 'span';\nif(process.env.NODE_ENV === 'development') {\n  DevTools = require('./DevTools');\n}\n\n// Define the Root component\nconst Root = (props) => {\n  return (\n    /* The Provider gives descendants the ability to connect to the Redux store */\n    <Provider store={props.store}>\n      <div>\n        {/* The Home component contains the guts of the page */}\n        <Home />\n        {/* DevTools is just an empty element when not in development mode */}\n        <DevTools />\n      </div>\n    </Provider>\n  );\n};\n\nmodule.exports = Root;\n","const ajax = {};\n\nif(process.env.IN_BROWSER) {\n  ajax.request = (opts) => {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest;\n      xhr.addEventListener('error', () => {\n        reject(new Error('Request failed'));\n      });\n      xhr.addEventListener('load', () => {\n        if(xhr.status !== 200) {\n          reject(new Error('Received status ' + xhr.status));\n        } else {\n          resolve(opts.json ? JSON.parse(xhr.responseText) : xhr.responseText);\n        }\n      });\n      xhr.open(opts.method, opts.url);\n      if(opts.json) {\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(opts.data !== undefined ? JSON.stringify(opts.data) : opts.data);\n      } else {\n        xhr.send(opts.data);\n      }\n    });\n  };\n} else {\n  const request = require('request');\n\n  ajax.request = (opts) => {\n    return new Promise((resolve, reject) => {\n      request({\n        url: opts.url,\n        method: opts.method,\n        body: opts.data,\n        json: opts.json\n      }, (error, response, body) => {\n        if(error) {\n          reject(error);\n        } else if(response.statusCode !== 200) {\n          reject(new Error('Received status ' + response.statusCode));\n        } else {\n          resolve(body);\n        }\n      });\n    });\n  };\n}\n\nmodule.exports = ajax;\n","const ajax = require('./ajax');\n\nconst api = {};\n\nif(process.env.IN_BROWSER) {\n  api.baseUrl = '/api';\n} else {\n  api.baseUrl = 'http://api:3000';\n}\n\napi.get = function(path) {\n  return ajax.request({\n    method: 'GET',\n    url: this.baseUrl + path,\n    json: true\n  });\n};\n\napi.post = function(path, data) {\n  return ajax.request({\n    method: 'POST',\n    url: this.baseUrl + path,\n    json: true,\n    data\n  });\n};\n\napi.put = function(path, data) {\n  return ajax.request({\n    method: 'PUT',\n    url: this.baseUrl + path,\n    json: true,\n    data\n  });\n};\n\napi.delete = function(path) {\n  return ajax.request({\n    method: 'DELETE',\n    url: this.baseUrl + path,\n    json: true\n  });\n};\n\nmodule.exports = api;\n","const _ = require('lodash');\n\nmodule.exports = function() {\n  // Get an array of arguments passed into this function\n  const actionCreatorsArray = _.assign([], arguments);\n\n  // Return a function that, when given a dispatch function, returns an\n  // object containing a bunch of action dispatchers\n  return (dispatch) =>\n    // Iterate over actionCreatorsArray, which is an array of arrays of action\n    // creators\n    actionCreatorsArray.reduce((actionDispatchers, actionCreators) => {\n      // Add an action dispatcher for each action creator in actionCreators\n      Object.keys(actionCreators)\n        .filter((name) => (typeof actionCreators[name] === 'function'))\n        .forEach((name) => {\n          actionDispatchers[name] = function() {\n            return dispatch(actionCreators[name].apply(this, arguments));\n          };\n        });\n      return actionDispatchers;\n    }, {});\n};\n","const Redux = require('redux');\nconst reduxThunk = require('redux-thunk').default;\nconst combinedReducers = require('../reducers');\n\nlet enhancer;\n\nif(process.env.NODE_ENV === 'production') {\n  enhancer = Redux.applyMiddleware(reduxThunk)\n} else {\n  const DevTools = require('../components/DevTools');\n\n  enhancer = Redux.compose(\n    // Enables middleware\n    Redux.applyMiddleware(reduxThunk),\n    // Enables DevTools\n    DevTools.instrument()\n  );\n}\n\nmodule.exports = initialState => {\n  const store = Redux.createStore(combinedReducers, initialState, enhancer);\n  return store;\n}\n","const Redux = require('redux');\n\nconst posts = require('./posts');\nconst time = require('./time');\n\nmodule.exports = Redux.combineReducers({\n  posts,\n  time\n});\n","const _ = require('lodash');\nconst api = require('../helpers/api');\n\n// Action type constants\nconst INSERT = 'blog-frontend/posts/INSERT';\nconst CHANGE = 'blog-frontend/posts/CHANGE';\nconst REMOVE = 'blog-frontend/posts/REMOVE';\n\n// The initial state of blog post data\nconst initialState = {\n  visiblePosts: [\n    { id: 5,\n      title: \"From Redux Store: Companies that make computers\",\n      content: \"Dell Apple Toshiba Acer\",\n      createdAt: \"2016-09-11T23:26:36.000Z\",\n      updatedAt: \"2016-09-11T23:26:36.000Z\"\n    },\n    {id: 4,\n     title: \"From Redux Store: Dell\",\n     content: \"A company that makes computers \",\n     createdAt: \"2016-09-11T23:18:08.000Z\",\n     updatedAt: \"2016-09-11T23:18:08.000Z\"\n    },\n    { id: 3,\n      title: \"From Redux Store: Lego Nexo Knights\",\n      content: \"The best lego toy set in the world.\",\n      createdAt: \"2016-09-11T07:47:30.000Z\",\n      updatedAt: \"2016-09-11T07:47:30.000Z\"\n    },\n    { id: 2,\n      title: \"From Redux Store: React\",\n      content: \"An awesome JavaScript library from …\",\n      createdAt: \"2016-09-11T07:46:55.000Z\",\n      updatedAt: \"2016-09-11T07:46:55.000Z\"\n    },\n    { id: 1,\n      title: \"From Redux Store: Deep Learning\",\n      content: \"The use of neural networks to learn…\",\n      createdAt: \"2016-09-11T07:46:28.000Z\",\n      updatedAt: \"2016-09-11T07:46:28.000Z\"\n    }\n\n  ]\n};\n\n// Function which takes the current data state and an action,\n// and returns a new state\nfunction reducer(state, action) {\n  state = state || initialState;\n  action = action || {};\n\n  switch(action.type) {\n    // Inserts new posts into the local store\n    case INSERT: {\n\n\n      // Add in the new posts\n      // Notice that we do not need to increment the post id. Since the post that we\n      // are putting in is one that is returned by the api server which already has\n      // the id incremented.\n      const unsortedPosts = _.concat(state.visiblePosts, action.posts);\n\n      const visiblePosts = _.orderBy(unsortedPosts, 'createdAt','desc');\n\n      // Return updated state\n      return _.assign({}, state, { visiblePosts} );\n    }\n    // Changes a single post's data in the local store\n    case CHANGE: {\n      const visiblePosts = _.clone(state.visiblePosts);\n      const changedIndex = _.findIndex(state.visiblePosts, {id: action.post.id })\n      visiblePosts[changedIndex] = action.post;\n      return _.assign({}, state, { visiblePosts });\n    }\n\n    // Removes a single post from the visible post list\n    case REMOVE: {\n      const visiblePosts = _.reject(state.visiblePosts, {id: action.id});\n      return _.assign({}, state, { visiblePosts });\n    }\n\n    default: return state;\n  }\n}\n\n// Now we define a whole bunch of action creators\n\n// Inserts posts into the post list\nreducer.insertPosts = (posts) => {\n  return { type: INSERT, posts };\n};\n\n// Removes a post from the visible post list\nreducer.removePost = (id) => {\n  return { type: REMOVE, id };\n};\n\n// Attempts to delete a post from the server and removes it from the visible\n// post list if successful\nreducer.deletePost = (postId) => {\n   // TODO Section 8: Add code to perform delete\n   return (dispatch) => {\n   api.delete('/posts/' + postId).then(() => {\n   dispatch(reducer.removePost(postId));\n   }).catch(() => {\n    alert('Failed to delete post.');\n   });\n   };\n};\n\n// Attempts to update a post on the server and updates local post data if\n// successful\nreducer.savePost = (editedPost, callback) => {\n  return (dispatch) => {\n    api.put('/posts/' + editedPost.id, editedPost).then((post) => {\n      // Saves local post.\n      dispatch(reducer.changePost(post));\n      callback();\n    }).catch(() => {\n      alert('Failed to save post.  Are all of the fields filled in correctly?');\n    });\n  };\n};\n\n// Attempts to create a post on the server and inserts it into the local post\n// list if successful\nreducer.createPost = (newPost, callback) => {\n  return (dispatch) => {\n    api.post('/posts', newPost).then((post) => {\n      // This post is one that the store returns us! It has post id incremented to the next available id\n      dispatch(reducer.insertPosts([post]));\n      callback();\n    }).catch(() => {\n      alert('Failed to create post. Are all of the fields filled in correctly?');\n    });\n  };\n};\n\n// Changes local post data\nreducer.changePost = (post) => {\n  return { type: CHANGE, post };\n};\n\n// Attempts to load more posts from the server and inserts them into the local\n// post list if successful\nreducer.loadMorePosts = (callback) => {\n  return (dispatch, getState) => {\n    const state = _.assign({}, initialState, getState().posts);\n\n    let path = '/posts';\n    if (state.visiblePosts.length > 0) {\n        const oldestPost =_.last(state.visiblePosts);\n        path = '/posts?olderThan=' + oldestPost.createdAt;\n    }\n    api.get(path).then((newPosts) => {\n      dispatch(reducer.insertPosts(newPosts));\n      callback();\n    }).catch(() => {\n      alert('Failed to load more posts');\n      callback('Failed to load more posts');\n    });\n\n  };\n\n\n};\n\n// Export the action creators and reducer\nmodule.exports = reducer;\n","const _ = require('lodash');\n\nconst UPDATE = 'blog-frontend/time/UPDATE';\n\nfunction reducer(state, action) {\n  state = state || {};\n  action = action || { type: null };\n\n  switch(action.type) {\n    case UPDATE: {\n      return _.assign({}, state, { now: action.timeNow });\n    } break;\n    default:\n      return state;\n  }\n}\n\nreducer.setCurrentTime = function(timeNow) {\n  return { type: UPDATE, timeNow }\n};\n\nmodule.exports = reducer;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}